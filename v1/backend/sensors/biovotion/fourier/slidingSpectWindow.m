function slidingSpectWindow( msrData )

    msrCleanData = removeNan( msrData );

    f = figure(1);

    dataIndex = 1;
    windowSize = 100;
    maxSamples = length( msrCleanData( 1, : ) );

    %// Make initial plot
    p = spectralAnalysisPlot( msrCleanData, 4, [ dataIndex, windowSize ] );

    %// re-position the axes to make room for the slider
    set(gca, 'position', [0.1 0.25 0.85 0.7]);

    dataIndexSlider = uicontrol(...
        'parent'  , f,...        
        'units'   , 'normalized',...    
        'style'   , 'slider',...        
        'position', [0.05 0.05 0.9 0.05],...
        'min'     , 1,...               
        'max'     , maxSamples - windowSize,... 
        'value'   , dataIndex,...            
        'callback', @dataIndexSliderCallback);   
                                     
    windowSizeSlider = uicontrol(...
        'parent'  , f,...        
        'units'   , 'normalized',...    
        'style'   , 'slider',...        
        'position', [0.05 0.15 0.9 0.05],...
        'min'     , 50,...               
        'max'     , windowSize,... 
        'value'   , windowSize,...            
        'callback', @windowSizeSliderCallback);   
                      

    hLstn = handle.listener(dataIndexSlider,'ActionEvent',@dataIndexSliderCallback);
    hLstn = handle.listener(windowSizeSlider,'ActionEvent',@windowSizeSliderCallback);
  
    function dataIndexSliderCallback(~,~)
        delete(p);
        dataIndex = int32( get( dataIndexSlider, 'Value' ) );
        p = spectralAnalysisPlot( msrCleanData, 4, [ dataIndex, dataIndex + windowSize ] );
    end

    function windowSizeSliderCallback(~,~)
        delete(p);
        windowSize = int32( get( windowSizeSlider, 'Value') );
        p = spectralAnalysisPlot( msrCleanData, 4, [ dataIndex, dataIndex + windowSize ] );
    end
end